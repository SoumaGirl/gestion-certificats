{"ast":null,"code":"import axios from 'axios';\n\n// Créer une instance d'Axios avec des configurations par défaut\nconst api = axios.create({\n  baseURL: 'http://localhost:3001/Api',\n  // Remplace par l'URL de ton API\n  timeout: 10000,\n  // Timeout de 10 secondes pour les requêtes\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Fonction pour mettre à jour le token d'authentification (si nécessaire)\nexport const setAuthToken = token => {\n  if (token) {\n    api.defaults.headers['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete api.defaults.headers['Authorization'];\n  }\n};\n\n// Exemple de requête GET avec gestion d'erreur améliorée\nexport const getData = async () => {\n  try {\n    const response = await api.get('/data-endpoint'); // Remplace par ton endpoint API\n    return response.data;\n  } catch (error) {\n    handleError(error);\n    throw error;\n  }\n};\n\n// Exemple de requête POST avec gestion d'erreur améliorée\nexport const postData = async data => {\n  try {\n    const response = await api.post('/submit-endpoint', data); // Remplace par ton endpoint API\n    return response.data;\n  } catch (error) {\n    handleError(error);\n    throw error;\n  }\n};\n\n// Fonction pour gérer les erreurs de manière détaillée\nconst handleError = error => {\n  if (error.response) {\n    // La réponse a été reçue mais elle contient une erreur\n    console.error('Erreur HTTP:', error.response.status);\n    console.error('Détails:', error.response.data);\n  } else if (error.request) {\n    // La requête a été faite mais aucune réponse n'a été reçue\n    console.error('Erreur réseau ou aucune réponse:', error.request);\n  } else {\n    // Autre type d'erreur\n    console.error('Erreur inconnue:', error.message);\n  }\n};\n\n// Export de l'instance pour l'utiliser partout dans ton app\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","timeout","headers","setAuthToken","token","defaults","getData","response","get","data","error","handleError","postData","post","console","status","request","message"],"sources":["C:/Users/AdMin/eclipse-workspace/gestion-certificats/gestion-certificats/frontend/src/services/Api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Créer une instance d'Axios avec des configurations par défaut\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:3001/Api', // Remplace par l'URL de ton API\r\n  timeout: 10000,  // Timeout de 10 secondes pour les requêtes\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  }\r\n});\r\n\r\n// Fonction pour mettre à jour le token d'authentification (si nécessaire)\r\nexport const setAuthToken = (token) => {\r\n  if (token) {\r\n    api.defaults.headers['Authorization'] = `Bearer ${token}`;\r\n  } else {\r\n    delete api.defaults.headers['Authorization'];\r\n  }\r\n};\r\n\r\n// Exemple de requête GET avec gestion d'erreur améliorée\r\nexport const getData = async () => {\r\n  try {\r\n    const response = await api.get('/data-endpoint');  // Remplace par ton endpoint API\r\n    return response.data;\r\n  } catch (error) {\r\n    handleError(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Exemple de requête POST avec gestion d'erreur améliorée\r\nexport const postData = async (data) => {\r\n  try {\r\n    const response = await api.post('/submit-endpoint', data);  // Remplace par ton endpoint API\r\n    return response.data;\r\n  } catch (error) {\r\n    handleError(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fonction pour gérer les erreurs de manière détaillée\r\nconst handleError = (error) => {\r\n  if (error.response) {\r\n    // La réponse a été reçue mais elle contient une erreur\r\n    console.error('Erreur HTTP:', error.response.status);\r\n    console.error('Détails:', error.response.data);\r\n  } else if (error.request) {\r\n    // La requête a été faite mais aucune réponse n'a été reçue\r\n    console.error('Erreur réseau ou aucune réponse:', error.request);\r\n  } else {\r\n    // Autre type d'erreur\r\n    console.error('Erreur inconnue:', error.message);\r\n  }\r\n};\r\n\r\n// Export de l'instance pour l'utiliser partout dans ton app\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,2BAA2B;EAAE;EACtCC,OAAO,EAAE,KAAK;EAAG;EACjBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,YAAY,GAAIC,KAAK,IAAK;EACrC,IAAIA,KAAK,EAAE;IACTN,GAAG,CAACO,QAAQ,CAACH,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUE,KAAK,EAAE;EAC3D,CAAC,MAAM;IACL,OAAON,GAAG,CAACO,QAAQ,CAACH,OAAO,CAAC,eAAe,CAAC;EAC9C;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,OAAO,GAAG,MAAAA,CAAA,KAAY;EACjC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMT,GAAG,CAACU,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAE;IACnD,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,WAAW,CAACD,KAAK,CAAC;IAClB,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,QAAQ,GAAG,MAAOH,IAAI,IAAK;EACtC,IAAI;IACF,MAAMF,QAAQ,GAAG,MAAMT,GAAG,CAACe,IAAI,CAAC,kBAAkB,EAAEJ,IAAI,CAAC,CAAC,CAAE;IAC5D,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,WAAW,CAACD,KAAK,CAAC;IAClB,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,MAAMC,WAAW,GAAID,KAAK,IAAK;EAC7B,IAAIA,KAAK,CAACH,QAAQ,EAAE;IAClB;IACAO,OAAO,CAACJ,KAAK,CAAC,cAAc,EAAEA,KAAK,CAACH,QAAQ,CAACQ,MAAM,CAAC;IACpDD,OAAO,CAACJ,KAAK,CAAC,UAAU,EAAEA,KAAK,CAACH,QAAQ,CAACE,IAAI,CAAC;EAChD,CAAC,MAAM,IAAIC,KAAK,CAACM,OAAO,EAAE;IACxB;IACAF,OAAO,CAACJ,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAACM,OAAO,CAAC;EAClE,CAAC,MAAM;IACL;IACAF,OAAO,CAACJ,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAACO,OAAO,CAAC;EAClD;AACF,CAAC;;AAED;AACA,eAAenB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}